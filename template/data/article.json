[
  {
    "title": "Kuesa 3D for developer",
    "description": "leverage powerful tools to preview, condition, sanity check and optimize assets",
    "bottom_teaser": { "id": 3 },
    "content": [
      {
        "__component": "item.part",
        "part": "Developers have full control of the workflow. They can leverage all Kuesa 3D Studio tools to preview, condition, sanity check and optimize assets. For example, the asset pipeline editor can help them preview and introspect the scene. \n\n![Kuesa-Editor1.png](/uploads/Kuesa_Editor1_3392ea3f65.png)\n\nKuesa 3D glTF2 Library is built on top of Qt 3D, which itself was created and is maintained by KDAB engineers, so they know it inside out. Kuesa 3D glTF2 Library provides seamless integration in your Qt application, with added features:\n- Imports glTF™ files, with specific Kuesa 3D extensions\n- Supports PBR materials\n- Includes IRO Materials\n- Provides an optimized default frame graph (high level description of the OpenGL pipeline configuration)\n- Gives full access to the scene items via collections\n\nKuesa 3D Studio is easy to integrate into any 3D or hybrid 2D / 3D Qt application. Developers are free to use either the C++ or the QML API and can access all the internals of the 3D scenes from the code - opening the way to all kinds of improvements ranging from adding special effects or user interactions to creating an optimized frame graph for a specific board. A packaged and supported version of KUESA™ 3D glTF2 Library is available as a stand-alone part of Kuesa 3D Studio so that R&D Teams can easily evaluate and test existing designs in working code. See more below.\n\n## PBR\n\nKuesa 3D Studio is based on top of PBR (Physically Based Rendering) materials which approximate real world physics in real-time with a photo-realistic result. The materials used in the 3D design tool and the engine are the same, so the result will look alike in both applications.\n\n## IRO Materials\n\nPhysically-based rendering (PBR) can generate amazing images, but not all embedded systems have enough processing power to handle it. Also, without knowing the actual physics, PBR isn’t easily tweakable to simulate materials such as a pre-defined bitmap that needs to appear glossy. For these cases, or any other where PBR may be overkill, KUESA 3D Studio supports the Iro Material Library. This library provides a catalog of materials that can simulate common surface properties (such as reflections, clear-coated paint, and transparency) and gives great looking results with less designer and GPU overhead. Iro Materials are 90% less complex than PBR materials and thus more performant and low risk when deploying on low end / embedded hardware.\n\n## Give it a try\n\nKUESA™ 3D Studio is available under a commercial license with a 30-day free trial. Contact us to arrange the free trial.\n\n## New for developers in Kuesa 1.2\n\n- Ability to load custom glTF materials\n- Improved / simplified API (e. g. for binding property changes of asset nodes in QML)\n- Profiling capabilities (as part of Qt3D (Qt 5.15 upwards)\n- Animation extension (parse custom animation(-properties))\n\nSince it is built on top of Qt 3D, you can use the full Qt 3D API to further customize your application."
      }
    ],
    "image": { "name": "image3.png" }
  },
  {
    "title": "Kuesa 3D for designers",
    "description": "create and animate in Blender, Maya or 3ds Max – export to glTF format",
    "bottom_teaser": { "id": 2 },
    "content": [
      {
        "__component": "item.part",
        "part": "Kuesa 3D makes designers’ lives much easier. It seamlessly integrates into your favorite design tool, like 3ds Max®, Maya or Blender, adding new features: e.g. Material support, feature enablers and glTF™ exporter. You stay in control of your design during the whole development process. Changes can easily and quickly be added to the 3D application via glTF 2.0 exporter.\n\nWith Kuesa 3D designers use the professional 3D design tool they know best to create the 3D scenes. Tools such as Maya® and Blender have all the features needed to create stunning animations in a very efficient way. The Kuesa 3D digital content creation plugins integrate into the 3D design tool to add new features:\n\n- Material support: sets of materials supported by Kuesa 3D Studio during export\n- Iro Materials: materials to simulate reflections, paints with clear coats or simple transparent surfaces\n- Feature enablers: properties or items that can be leveraged later by the developers (like layers)\n- animations: animate material, lights or camera properties in your 3D design tool, and then export the scene as a glTF 2.0 file (with the extensions) and load it with Kuesa Runtime.\nAnimation groups\n- glTF™ exporter: export the scene in glTF 2.0 format\n\n![Kuesa-designers-1.png](/uploads/Kuesa_designers_1_f820a79f04.png)\n\nOnce the scene is exported, the designer can use Kuesa 3D Studio tools like the asset pipeline editor to preview and sanity check assets.\n## Iro Materials Library\n\nNew Iro Materials provide 3D designers with an intuitive, artistic way of working. They furnish designers with a catalog of materials that can simulate common surface properties (such as reflections, clear-coated paint, and transparency), giving great looking results with less designer and GPU overhead. They can be fully integrated into DCC tools like Blender, Maya or 3ds Max, giving an exact WYSIWYG during asset creation and letting the designer examine and adjust the final visual result during modeling. Iro Materials are 90% less complex than PBR materials and thus more performant and low risk when deploying on low end / embedded hardware.\n\nKuesa 3D's Iro Materials features include:\n\n- extensions to allow exporting Iro Materials to glTF 2.0 files.\n- add-ons to show a real time WYSIWYG preview of the Iro Materials.\n\n## PBR\n\nKuesa 3D Studio is based on top of PBR (Physically Based Rendering) materials which approximate real world physics in real-time with a photo-realistic result. The materials used in the 3D design tool and the engine are the same, so the result will look alike in both applications.\n\n"
      }
    ],
    "image": { "name": "image1.png" }
  },
  {
    "title": "Contact Us",
    "description": "find out more about Kuesa 3D and get a free evaluation",
    "content": [
      {
        "__component": "item.part",
        "part": "To learn more about Kuesa 3D Studio and to get a 30-day free eval version, please use the contact form **below** or **email us**.\n\nFor enquiries in **Asia** please contact **tQCS Inc.**, KDAB's representative in the region."
      },
      {
        "__component": "item.page-gimmick",
        "type": "ContactFormular"
      }
    ],
    "image": { "name": "image1.png" }
  },
  {
    "title": "Is Kuesa 3D for my team?",
    "description": "find out how Kuesa 3D's unique design-to-code workflow can help you",
    "content": [
      {
        "__component": "item.part",
        "part": "## Get to market first with enhanced team collaboration\n\nIn project teams designers and developers each have different areas of expertise and different needs. Designers are focused on \"look and feel\", developers are focused on the best use of the hardware platform. Designers are more effective when they don't have to deal with development issues, developers are more efficient when they are not involved with design issues.\n\nNo matter how good the design or development tools are, there will be a gray overlap where designers and developers have to spend energy bridging the gulf between their disciplines. Kuesa 3D supplies this missing link, facilitating a smooth workflow and enabling speedy design iterations. This results in you getting to market ahead of your competitors, whilst improving your team's collaboration and effectiveness.\n\nIntegrating 3D content into your application is challenging which is why 3D engines are needed to do the hard work like rendering, 3D animations, shaders and various effects. There are several 3D engines available for this **but how does this effect your workflow**?\n\n![workflow.png](/uploads/workflow_e808f73141.png)"
      },
      {
        "__component": "item.part",
        "part": "## What challenges do you face?\n\n- Significant time lost coordinating between multiple 3D designers and developers\n- Many time-consuming iterations of a design\n- Model variations and adjustments needing speedy design and development\n- Your application needs to show the current dynamic state in realtime\n- Workflow communications between your designers and developers need improving.\n\nKuesa 3D Studio is a complete design-to-code workflow solution with the sole aim of solving these.\n\n![workflowImage.png](/uploads/workflow_Image_0b1bf7fea3.png)"
      },
      {
        "__component": "item.part",
        "part": "## Kuesa 3D Studio's workflow\n\nWith Kuesa 3D Studio the whole design process, including scene creation, happens inside the 3D authoring tool. Designers see the final result, including materials during design time. Design changes only happen inside the 3D authoring tool, no export/import steps are required for checking the final result. It leverages all the high-grade features of that 3D tool and exports the 3D design using the glTF 2.0 format, ready for developers to easily integrate into the application.\n\n## Other workflows compared\n\nThere are two other common workflows that Kuesa 3D improves on:\n\n1. **Double-work workflows**. Single 3D assets are exported by the designer using a 3D authoring tool. The scene is put together later in the app by the developer. This forces developers to attempt to recreate the design and means designers can't work on the scene autonomously. This is very unsatisfactory, it eats into development time and there is a high risk of failure. Kuesa **3D's simplified workflow is a vast improvement over this**.\n2. **Extra step workflows**. 3D assets are exported by designers using their 3D authoring tool and then imported into a proprietary scene editor. The designer can now create the scene autonomously, however, now there is an extra export/import step and another tool required. This makes managing exported/imported 3D assets more of an effort, especially with design changes as big projects grow. **Kuesa 3D removes the need for a scene editor saving significant amounts of time**.\n\n## Syncing 3D and 2D\n\n3D authoring tools are not made for creating 2D user interfaces nor coding business logic. However, Kuesa 3D makes it easy to sync both worlds and stays consistent when moving the work up the pipeline. With Kuesa 3D Studio you can add triggers to 3D animations in order to trigger events in QML, the work is done on a single timeline (the 3D animation timeline) or by tracking 3D objects in screen space, all controlled in the 3D authoring tool."
      }
    ],
    "image": { "name": "image6.png" }
  },
  {
    "title": "Posts in Category: Blogs",
    "content": [
      {
        "__component": "item.page-gimmick",
        "type": "BlogOverview"
      }
    ],
    "image": { "name": "image4.png" }
  },
  {
    "title": "Kuesa 3D Licensing",
    "description": "Read more about the different licensing models below",
    "bottom_teaser": { "id": 1 },
    "content": [
      {
        "__component": "item.part",
        "part": "## Kuesa 3D Studio full license\n\nKuesa offers a comprehensive and straightforward licensing model.\n- One license per specific project\n- Unlimited number of designers or developers\n- No per-device royalties (runtime fees) or limitations on the deployment platforms\n- Perpetual and subscription options available\n\nDistribution rights are applied per project and can be acquired at any time before product release. This means you can start using Kuesa 3D Studio and buy distribution rights at the most suitable point for your project budget.\n\nThe commercial license terms are [here](#).\n\n## Kuesa 3D Studio eval license\n\nThe free of charge 30-day evaluation license of Kuesa 3D Studio gives you time to see if the technology fits your needs. The evaluation license contains everything from the full main product, except for distribution rights.\n\n## Kuesa 3D glTF2 Library\n\nForming the library part of the main product, this is useful for developers who already have a GLTF2 model/asset and only want to load it into their application.\n\nYou may need to download an existing plugin for your 3D design tool to export to glTF 2.0, as it is not included in the Kuesa 3D glTF2 Library.\n\nThis library is available under AGPL and commercial license.\n\nThe source code is available on our [github repository](https://github.com/KDAB/kuesa)."
      }
    ],
    "image": { "name": "image4.png" }
  },
  {
    "title": "Kuesa 3D Studio 1.3 is released!",
    "author": { "id": 1 },
    "status": "published",
    "bottom_teaser": { "id": 3 },
    "content": [
      {
        "__component": "item.part-with-image",
        "content": "KDAB is releasing version 1.3 of the 3D integration workflow Kuesa 3D Studio, built on top of Qt 3D.\n\nKuesa 3D Studio is a complete design-to-code workflow solution for 3D in real-time applications. It saves your team a lot of time, and allows your projects to get to market first. To assure independence from particular platforms Kuesa uses the open glTF™ 2.0 format already supported by Blender, Maya, 3ds Max and others.\n\nKuesa provides a workflow that simplifies work for both designers and developers. It is centered on the glTF 2.0 format. As a result changes made by designers to 3D models require little, if any, work on the developer’s side to integrate into their application. Teams can iterate more frequently, get feedback and fine-tune more often, ensuring that the release is on time. Find out more…",
        "position": "UpperRightCorner"
      }
    ],
    "image": { "name": "image4.png" }
  },
  {
    "title": "Kuesa 3D Studio 1.2  – Press Release",
    "author": { "id": 2 },
    "publishedAt": "2020-06-02T10:00:00.000Z",
    "status": "published",
    "bottom_teaser": { "id": 3 },
    "content": [
      {
        "__component": "item.part-with-image",
        "headline": "KUESA™ 3D Studio 1.2 released",
        "content": "A Complete Design-to-Code Workflow Solution for 3D Assets in Real-time Applications\n\n- version 1.2 released\n- makes 3D design and development workflows easy, fast and reliable\n- offers support for Maya, Autodesk 3ds Max, and Blender as well as any other glTF-compatible digital content creation tools\n- **New:** Iro materials library can simulate common surface properties with less designer and GPU overhead\n- free live webinar June 4th, 6pm CEST\n\n#### Berlin, June 2nd 2020\nBuilding software that is dependent on real-time 3D models – like for example an automotive dashboard, MRI machine, factory control system or furniture design tool – requires not only 3D designers and 3D programmers. It also demands the ability to bring these very different skill sets together into a smoothly operating workflow.\n\nIn conventional workflows, a massive problem is that the assets created by 3D artists can rarely be used by programmers directly, forcing the development team to hand-tweak models and hand-code animations to make things work. It also forces designers to move their designs to target hardware to see how they’ll actually appear. This manual work extends product release timelines, and the artificial wall it creates between 3D artists and software engineers is a bottleneck that prohibits rapid iteration and the fine-tuning required to develop fast and high-quality results.\n\nTo eliminate this problem KDAB created KUESA 3D Studio. It makes the collaboration of designers and developers much more manageable by offering a seamless, integrated workflow. Designers can realize their vision using their favorite tools, developers can focus on their strengths without having to deal with design issues, and management can rely on getting better products to market faster.\n\n## How does KUESA 3D Studio work?\n\nKUESA 3D Studio is comprised of three main components.\n\nThe KUESA 3D Design Plugins augment a designer’s preferred digital content creation tools, allowing them to create and export fully accessible 3D scenes and to display content that visually matches the run-time environment.\n\nMany additional utilities are integrated in KUESA 3D Tools for fine-tuning, conditioning, investigating, debugging, and optimizing 3D assets, usable by either designers or developers.\n\nLibraries built on top of Qt and Qt 3D allow developers to integrate 3D scenes directly into applications. This module is called KUESA 3D Runtime.\n\n## What’s new in version 1.2?\n\nOne of the most significant improvements is the Iro Materials Library. Physically-based rendering (PBR) can generate amazing images, but not all embedded systems have enough processing power to handle it. Also, without knowing the actual physics, PBR isn’t easily tweakable to simulate materials such as a pre-defined bitmap that needs to appear glossy. For these cases, or any other where PBR may be overkill, KUESA 3D Studio supports the Iro Material Library. This library provides a catalog of materials that can simulate common surface properties (such as reflections, clear-coated paint, and transparency) and gives great looking results with less designer and GPU overhead.\n\nBy default, glTF™ only allows you to animate transformation properties like translation, rotation, scale. In lots of cases, it would be useful to animate other properties like material properties, camera properties etc. This has now been added through the use of a custom glTF extension.\n\nAn additional benefit is brought in by Qt 3D, which KUESA 3D Studio is based on and which is maintained by KDAB. With Qt 3D on Qt 5.15.0 very potent profiling capabilities have been added.\n\nMore features:\n\n- Support for Maya, Autodesk 3ds Max, and Blender, as well as any other glTF-compatible digital content creation tools\n- Ability to build 3D scenes with PBR, non-PBR, and node-based materials\n- Real-time performance on desktop and embedded systems\n- Integration of both 3D and 2D assets\n- Compressed textures, meshes, and images for faster load times, reduced application size, and optimal use of GPU resources\n- Full programmatic access to scene items with APIs in C++ and QML\n- Photo-realistic results consistent across design tools and applications\n- Special effects like bloom and depth-of-field\n- Up to date with Qt 3D performance improvements in Qt 5.15\n- Ability to incorporate tools into a continuous integration system resulting in consistent 3D asset verification and conditioning\n- Availability of AGPL 3 license for KUESA 3D Runtime\n\nMore information on [www.kuesa.com](https://www.kdab.com/kuesa/)\n\nLive demo webinars are scheduled for:\n\n[June 4th 2020](https://us02web.zoom.us/webinar/register/WN_mSYcLpsKSE-E3KUaVk3oyg)… (6pm Central European Time)\n\n[June 18th 2020](https://us02web.zoom.us/webinar/register/WN_-WV8eevISVygRJxJpHNoqA)... (8am Central European Time)\n\n[Video footage](https://www.youtube.com/playlist?list=PL6CJYn40gN6hVdcXHTtzzltmSvZ6eG590)…\n\nAbout the KDAB Group\n\nThe KDAB Group is the world’s leading software consultancy for architecture, development and design of Qt, C++ and OpenGL applications across desktop, embedded and mobile platforms and is one of the biggest independent contributors to Qt. Our experts build run-times, mix native and web technologies, and solve hardware stack performance issues and porting problems for hundreds of customers, many among the Fortune 500. KDAB’s tools and extensive experience in creating, debugging, profiling and porting complex applications help developers worldwide to deliver successful projects. KDAB’s trainers, all full-time developers, provide market leading, hands-on, training for Qt, OpenGL and modern C++ in multiple languages. Founded in 1999, KDAB has offices throughout North America and Europe.\n\nMore Information on www.kdab.com\nPress Contact: press@kdab.com\n\nDownload this report\n\n- as a .pdf: [Kuesa 1.2 press release]()\n- as a Word file: [Kuesa 1.2 press release]()\n- as a Pages files: [Kuesa 1.2 press release]()",
        "position": "UpperRightCorner",
        "image": { "name": "image7.png" }
      }
    ],
    "image": { "name": "cropped-icon.png" }
  },
  {
    "title": "New features and changes in the Kuesa 1.1.0 release",
    "author": { "id": 3 },
    "publishedAt": "2020-01-28T11:00:00.000Z",
    "bottom_teaser": { "id": 3 },
    "content": [
      {
        "__component": "item.part",
        "part": "[KUESA™](https://www.kdab.com/kuesa/) is a solution that provides an integrated and unified workflow for designers and developers to create, optimize and integrate real time 3D content in a 3D or hybrid 2D/3D software user interface. Models, including geometry, materials, animations and more, can smoothly be shared between designers and developers. Kuesa relies on glTF 2.0, an open standard which is being broadly used in the industry, so it can easily and seamlessly integrate with a growing number of authoring tools.\n\nKuesa is made of 3 main components:\n\n- In addition to supporting any compliant glTF 2.0 files, Kuesa provides **plugins for content creation tools Blender and 3DS Max** for creating glTF 2.0 files which support custom extensions.\n- **A Qt module designed to load, render and manipulate glTF 2.0 models in applications using Qt 3D**, making it easy to do things like triggering animations contained in the glTF files, finding camera details defined by the designer, etc. It also includes a library of post processing effects which can be easily extended.\n- **Tools to help designers and developers inspect and optimise the models**, including command line tools to automate the process\n\nThis blog post outlines the new features and changes in the 1.1.0 release.\n\nThe main objective for this release was to ensure compliance with the Khronos glTF 2.0 specification.\nWe made sure that Kuesa works on a wide range of target hardware, be it desktop, mobile or embedded.\nIn addition, a great deal of work has been put into a nice technical documentation, following the Qt standards.\nThis documentation is available at the following address : [https://www.kdab.com/kuesa/](https://www.kdab.com/kuesa/#)\n\nKuesa 1.1.0 supports Qt 5.12.5, 5.13 and the recently released Qt 5.14.\n\n## Kuesa Ecosystem\n\nThis release is marked by an ever-growing ecosystem of Kuesa-related tools, bindings and integrations.\n\nFirst and foremost, full **Python bindings** for Kuesa have been developed – learn more about this here.\nSupport for Kuesa extensions, such as layer support, is being worked on in the official Khronos Blender glTF exporter ; we will keep you posted about the progress on that.\nThe 3DS Max Kuesa exporter can on its side be downloaded here.\n\n**gltfEditor** (ex-assetpipelineeditor) has been improved, and a simple, minimal-dependency glTF 2 viewer has been implemented. It supports a few command line flags useful for testing and is simply named **gltfViewer**.\n\nA new tool to process glTF 2.0 assets from the command line has been implemented. It is named **assetprocessor**.\nIt allows for instance to compress meshes, and embed buffers in a glTF file or extract them.\n\n## Breaking changes\nSome tools have been renamed in order to make their main use case clearer.\n\n- **assetpipelineeditor** has been renamed **gltfEditor**.\n- The extension of shader graph save files has been changed from .qt3d to .graph (the files in kuesa/src/core/shaders/graphs).\n- The Material API has been refactored : all the properties on materials (**MetallicRoughnessMaterial**, **UnlitMaterial**) are now instead grouped in material-specific “Properties” class – **MetallicRoughnessProperties**, **UnlitProperties**. This allows to decouple the actual material logic from the parameters needed for rendering it.\n\n## New features\n**glTF 2.0** support has been greatly improved in this release. Morph targets, which were missing in Kuesa 1.0, are now available.\n\nSupport for a few extensions and niceties has been added :\n\n- **KHR_lights_punctual** : this feature manifests itself through the new Kuesa.DirectionalLight, Kuesa.PointLight and Kuesa.SpotLight objects.\n- **KHR_materials_unlit** : unlit materials are now also supported in glTF 2.0 files.\n- Support for loading GLB files (single-file binary glTF format) has landed\n- The GLTF2Importer now supports multiple glTF scenes.\n- Support for 2 UV sets was added as the spec requires it.\n- A BRDF look-up table texture is now used.\n\nThe **Kuesa API** has been augmented in a few ways :\nThe Kuesa API now provides a way to pass options to the parser, through the GLTF2Options C++ class and Kuesa.GLTF2Options QML object.\n\nPost-processing filters have seen an overhaul, and can now leverage depth textures.\nIn addition, a few new effects were implemented : depth-of-field and bloom.\nBloom can be tested in the car scene demo, and all effects are showcased in the framegraph_scene test project.\n\n![image.jpeg](/uploads/image_99d6ca9f2d.jpeg)\n\n**Normals and tangents** can now be automatically generated when missing (through the help of the MikkTSpace open-source library) – see the GLTF2Options.\n\n**gltfEditor** (ex-assetpipelineeditor) has gained a few new features, too :\n\n- It is now possible to configure the exposure, gamma, and the tonemapping algorithm in the settings.\n- The editor is able to save and load camera settings, under the camera pane.\n- Tangents can conveniently be generated from the user interface.\n\n![image.jpeg](/uploads/image_248728dc89.jpeg)\n\nA few **new examples and demos** were added :\n\n- A music box moved by a mechanical arm. Bonus points for who will find the original melody used in the demo 🙂\n \n![image.png](/uploads/image_4144f8f104.png)\n \n- A demo of the various tonemapping algorithms implemented in Kuesa :\n\n![image.jpeg](/uploads/image_3873db5f16.jpeg)\n\n## General improvements\n\nThe codebase was thoroughly tested on a wide range of hardware ; as such, many fixes in multiple areas of the codebase were implemented.\nVarious HiDPI and multisampling related issues were fixed. For instance, post-processing effects now support multisampling correctly.\n\nBetter performance was achieved for the car demo on low-power devices thanks to the use of pregenerated images for the user interface.\n\nThe tonemapping and PBR pipelines were also reworked. The changes fix color space issues in the frame graph, in particular with post-processing effects.\nThe PBR rework also fixes various subtle rendering artefacts.\n\n## Contributing to Kuesa\n\nAn infrastructure change has been put in place during this release cycle : dissatisfied by the pull request UI of Github, we migrated the code review to an open Gerrit instance, linked with our Github repository.\n\nFinally, a big thanks to all the contributors for this new version :\nJim Albamont, Robert Brock, Timo Buske, Juan Jose Casafranca, Jean-Michaël Celerier, Wieland Hagen, Sean Harmer, Mike Krus, Paul Lemire, David Morgan, Mauro Persano, Nuno Pinheiro, Allen Winter.\n\n"
      }
    ]
  }
]
